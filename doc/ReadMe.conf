Configuration file format

========================
Preliminary information:
========================

Specify the type of analysis (2 point or multipoint)

   TP 			(default)
   SS m			(m-marker sex-specific multipoint)
   SA m			(m-marker sex-averaged multipoint)

Specify chromosome type
   XC			(X chromosome, otherwise autosomes)

Specify polynomial evaluation; overrides the default explicit
evaluation condition

   PE		

Specify filenames

   PD pedfile 		(default pedfile.dat)
   DF datafile          (default datafile.dat)
   MK markerfile	(default markers.dat)
   MP mapfile 		(default mapfile.dat)
   LP loopfile		(default loops.dat)
   OF output		(default lods.out)
   HE average HET file  (default avghet.out)
   PF PPL file		(default ppl.out)

============================
Minor configuration options:
============================

Specify unknown person ID (default "0"):

   UP 0

We can set the affection status values with the AS tag:

   AS 0 1 2

where the first value is the "unknown" value, the second value is the
"unaffected" value, and the third value is the "affected" value (the
numbers shown reflect the defaults for DT; for multipoint, the
defaults are NAN, -9999.99, and 9999.99, respectively).

==========================
For the dichotomous model:
==========================

To call for a dichotomous model, use a header with a DT tag:

   DT

Next, specify the disease allele frequencies used in the
computation. Here, we use the keyword "GF", so we can either specify
"values" like:

   GF 0.1
   GF 0.2
   GF 0.4

or "grids" like:

   GF 0.1 0.8 0.1
   GF 0.85 0.95 0.01

whenever you see 1 number after the keyword, it's an explicit value,
when you see 3 numbers its a "range" of values.

for penetrances and thetas (when not sex-averaged), we would like to
be able to specify inter-penetrance and inter-theta constraints. Here,
assuming we're dealing with a biallelic disease, we'll use keywords
"DD" "Dd" and "dd" so, for example:

   DD 0.1
   DD 0.2
   DD 0.3
   DD 0.9
   Dd 0.0 0.8 0.1
   Dd 0.8 0.95 0.2
   Dd > DD
   dd 0.0 0.8 0.1
   Dd > dd

so this means:

   DD takes values 0.1, 0.2, 0.3, 0.9 => one value per line means "explicit value"
   Dd takes values from 0.0 to 0.8 by 0.1 and 0.8 to 0.95 by 0.2
      the added "Dd > DD" means that Dd is always constrained to be > DD
   dd takes values from 0.0 to 0.8 by 0.1 and is also constrained to
      be < Dd everywhere

or, if you prefer:

   DD 0.1
   DD 0.2
   DD 0.3
   DD 0.9
   Dd 0.0 0.8 0.1
   Dd 0.8 0.95 0.2
   dd 0.0 0.8 0.1
   Dd > DD
   Dd > dd

where the constraints are at the end.

I know these constraints are nonsensical, but using this "language" we
can explicitly code the precedence constraints on the penetrances, or
not, as we see fit. The operators allowed are:

  >, >=, !=

Note that constraints are always binary constraints, and that they are
implicitly conjunctive, that is, constraints on separate lines must
ALL be honored. To specify disjunction, simply place both constraints
on the same line separated by a ";" so that the notation allows the
specification of arbitrary constraints. So, for example:

  DD >= Dd
  Dd >= dd
  DD != Dd; Dd != dd

specifies the usual "dominating" penetrance model.

In the future we may wish to support multiallelic diseases (the
defaulty is biallelic diseases). To indicate more than two alleles for
the trait under study, use the DA tag:

   DA 3

To make specifying penetrances a bit easier (see below) we'll limit
the disease to 9 distinct alleles only. Here, we can no longer just
use D and d; instead, we'll use integers. This is also legal for the
biallelic case, so the model parameters just given could be
equivalently expressed as:

   DA 2
   00 0.1
   00 0.2
   00 0.3
   00 0.9
   01 0.0 0.8 0.1
   01 0.8 0.95 0.2
   11 0.0 0.8 0.1
   01 > 00
   01 > 11

Note the use of the integer labels, hence the limit on 9 disease
alleles.  In general, a disease with N alleles will require
specification of {1+2+3+...+N} = N*(N+1)/2 different penetrances.
Here, 0 will correspond, by default, to the disease gene D.

The AF directive is used to specify a number of allele
frequencies. Using a syntax like that for GF, you can establish the
values allowed marker allele frequencies:

   AF 0.01
   AF 0.2 0.8 0.1

note that AF is only meaningful for SNPs (where there are only two
alleles).

Another special option is to enable the use of liability classes in
the calculation. To turn liability classes on, just use the LC
directive to specify how many liability classes there are:

   LC 2

The default is to ignore liability class information in the pedigree
file (i.e., treat everyone as being in the same liability class, which
is equivalent to LC 1).

For two-point analysis, we'll use a similar description language to
specify theta:

   Th 0.1
   Th 0.2

means 2 explicit sex averaged values

   Tm 0.1 0.4 0.1
   Tm > Tf
   Tf 0.1
   Tf 0.2
   Tf 0.3

means male theta ranges from 0.1 to 0.4 by 0.1, but female theta only
ranges over three fixed values, and male theta always exceeds female
theta (why we would want this, who knows, but we at least can express
it).

I think this is better because each line's semantics is indicated
clearly by the keyword, wheras in mlip, "grid" could be a GF or a DD,
depending on position in the file. Secondly, we are now able to
express the constraints explicitly (or opt not to) rather than letting
them be implicit in the code.

So as an exercise, here is a (2 point) MLIP disease.dat file:

   DT
   value 0.00100 0.01000 0.10000 0.30000 0.50000 0.80000
   grid 0.0000 0.80000 0.10000
   continue 0.90000 0.99900 0.09900
   grid 0.0000 0.80000 0.10000
   continue 0.90000 0.99900 0.09900
   grid 0.0000 0.80000 0.10000
   continue 0.90000 0.99900 0.09900
   diag 0.0000 0.100 0.0100
   continue 0.12 0.2 0.02
   continue 0.25 0.45 0.05

here is the new corresponding kelvin configuration stanza:

   DT
   GF 0.001
   GF 0.01
   GF 0.1
   GF 0.3
   GF 0.5
   GF 0.8
   DD 0.0 0.8 0.1
   DD 0.9 0.999 0.099
   DD > Dd
   Dd 0.0 0.8 0.1
   Dd 0.9 0.999 0.099
   Dd >= dd
   dd 0.0 0.8 0.1
   dd 0.9 0.999 0.099
   Th 0.0 0.1 0.01
   Th 0.12 0.2 0.02
   Th 0.25 0.45 0.05

assuming that we want DD > Dd >= dd at all times which I believe are
implicit constraints in mlip, but would now be explicit (and optional)
in kelvin. Moreover, we can now specify "hyperdominant" models like:

   Dd > DD

It is simple to allow a comma or semicolon as a continuation
character, effectively merging successive entries that share a
prefix. The previous specification would then become the much more
brief:

    DT
    GF 0.001; 0.01; 0.1; 0.3; 0.5; 0.8
    DD 0.0 0.8 0.1; 0.9 0.999 0.099
    Dd 0.0 0.8 0.1; 0.9 0.999 0.099
    dd 0.0 0.8 0.1; 0.9 0.999 0.099
    DD > Dd
    Dd > dd
    Th 0.0 0.1 0.01; 0.12 0.2 0.02; 0.25 0.45 0.05

Note how each record is either a number or three numbers. I would
avoid, for simplicity, any extraneous syntax (like the .. or the extra
parens -- also, the .. will cause problems unless leading 0's are
required, which would be unreasonable).

For multipoint analysis, we don't need to specify theta, but we can
use a similar description language to specify instead the trait
locations on the chromosome:

   TL 0 125 2
   TL 126; 127; 128
   TL 129 300 10

The TM directive, if present, ensures that trait loci that map exactly
to markers are included in the tested trait loci. Note that specifying
TM may mean you needn't specify TL at all, if your satisfied with
on-marker trait loci only.

   TM

We'll use a scheme similar to that for TL to specify alpha parameter
values:

   AL 0.1; 0.2
   AL 0.3 0.9 0.2

Unlike for gene frequencies, penetrances and thetas, both trait loci
and alpha paremeters are independent of liability classes, and since
constraints are not meaningful, they are therefore also not supported
on these directives.

Finally, if you want to operate under linkage disequilibrium as
opposed to the default linkage equilibrium condition, use the LD
directive to specify D' values (note: -1 <= D' <= 1, and this option
only holds for two point analysis).

   LD -1 1 0.1
   LD 0.05; -0.05

===========================
For the quantitative model:
===========================

A similar configuration should apply for the quantitative model. We'll
use a header with the QT tag to indicate a quantitative model.

As before, the optional tag DA specifies the number of disease alleles
(default 2), and the optional LC tag to specify the number of
liability classes.

For the quantitative model, the DD, Dd, and dd tags have to change. QT
involves three distributions, one for each of DD, Dd and dd, each
characterized by a distribution type and a set of distributional
parameters.

We'll assume the distribution type (e.g., normal, gamma, lognormal) is
the same for all three DD, Dd, dd (should it be allowed to be
different?) and that only certain types will be supported. Each type
will have a certain set of parameters required to describe the type
(e.g., mean and variance for normal).

So, for example, assuming normal distributions for DD, Dd, and dd
(and, therefore, mean and std dev as the parameters) we might say:

    QT normal 0.5 1.2
    GF 0.001; 0.01; 0.1; 0.3; 0.5; 0.8
    DD 0.0 0.8 0.2
    Dd 0.0 0.6 0.2
    dd 0.0 0.2 0.1
    P1 0.0 0.2 0.1
    Th 0.0 0.1 0.01; 0.12 0.2 0.02; 0.25 0.45 0.05

Where the label following the QT specifies the type of distribution we
are working with, the population (dataset) mean and standard deviation, 
and the values specified in the following lines refer to the means grid 
of the distribution relative to N(0,1).

For the normal distribution, the value range for the lone additional
parameter (std dev) is given by the P1 tag, and is uniformly applied
to all DD, Dd and dd values. So, in this example, DD would have the
following potential (mean,std dev) values:

   (0.0 0.0),(0.0 0.1),(0.0 0.2),(0.1 0.0),(0.1 0.1),(0.1 0.2),(0.2 0.0)...

You'd also like to be able to specify constraints on the secondary
parameters, like, for example:

    P1 DD > P1 Dd

and you need to be able to extend this idea to multiple liability
classes as well:

    P1 DD 1 > P1 DD 2

As before, we might wish to specify the number of disease alleles with
the DA tag (default is 2):

    DA 2

For the multiallelic disease model, we'll need, as before, {1+2+...+N}
penetrances, each specified with as an incarnation of the same
distribution but with its own set of parameters. As before, we'll use
integer tags in the place of D and d, making the following
specification entirely equivalent to the previous example:

    QT normal 0.5 1.2
    GF 0.001; 0.01; 0.1; 0.3; 0.5; 0.8
    00 0.8 0.1
    01 0.6 0.2
    11 0.2 0.1
    P1 0.0 0.2 0.1
    Th 0.0 0.1 0.01; 0.12 0.2 0.02; 0.25 0.45 0.05

(What other distributions are we planning to use? t? gamma? what are
their parameter sets?).

=======================
For the combined model:
=======================

The combined model is just a thresholded QT model. We'll specify this
in exactly the same way as QT, but we'll use an additional "trait
threshold" line TT to specify the combined threshold parameters:

    QT normal 0.5 1.2
    TT 0.1, 0.2, 0.3
    GF 0.001, 0.01, 0.1, 0.3, 0.5, 0.8
    DD 0.0 0.8 0.2
    Dd 0.0 0.6 0.2
    dd 0.0 0.2 0.1
    P1 0.0 0.2 0.1
    Th 0.0 0.1 0.01; 0.12 0.2 0.02; 0.25 0.45 0.05

Here, you use check the value against a threshold and turn the
continuous trait into a dichotomous one if you exceed the specified
threshold (is this right?). Note that thresholds can be specified
independently for each liability class, and that constraints between
liability class thresholds are also supported.

As before, for multiallelic diseases, we have an optional DA tag with
an integer argument (default 2), and the optional LC tag to specify
the number of liability classes.  

====================================
Chi Square distribution for QT or CT
====================================
QT chisq mean sd

==========================
Truncated QT distributions
==========================
MIN - minimum of QT values
MAX - maximum of QT values 

Preprocess for a truncated distribution:
  For founders:
    Get the total count of founders say founder_count
    Get number of founders at MIN - say lb_count
    Get % of founders at MIN:  lb_% = lb_count/founder_count
    Find x that cdf(x) = lb_%
    Get variance of QT inside (MIN, MAX) - sigma
    mu'=x*sigma
    In kelvin.conf, give the following:
      QT T 30 -u' sigma
      MIN 0
 
======================
Linkage Disequilibrium
======================
Finally, as for dichotomous traits, if you want to operate under
linkage disequilibrium as opposed to the default linkage equilibrium
condition, use the LD directive to specify D' values (note: -1 <= D'
<= 1, and this option only holds for two point analysis).

   LD -1 1 0.1
   LD 0.05; -0.05

==================
Liability classes:
==================

We need to accomodate liability classes for all three models, and also
support constraints between liability classes. Thus liability classes
allow you to apply different penetrance models to individuals,
supporting things like, e.g., age of onset, or imprinting if you use
liability classes to code for M/F parents.

In practice, what this means is that when you have multiple liability
classes, you get "extra" dimensions for the LOD scores. Moreover, you
need to support cross-class constraints, as well as differing
within-class constraints. What you don't need to do is to support,
e.g., dichotomouse traits for one class and quantitative traits for
the other class, or different grid specifications for the different
classes.

For example, if you have two liability classes LC 1 and LC 2 in a DT
model:

    LC 2
    DD 0.0 0.8 0.1; 0.9 0.999 0.099
    Dd 0.0 0.8 0.1; 0.9 0.999 0.099
    dd 0.0 0.8 0.1; 0.9 0.999 0.099
    Dd > dd
    DD 1 > Dd 1
    DD 1 > DD 2

Note the extension to the constraint language; keywords without an
integer class number apply uniformly to all classes, while those with
integer class numbers provide inter-class constraints or within-class
constraints applied to only select classes. 

This specification says that Dd>dd for both LC 1 and LC 2, but DD>Dd
only for LC 1 and not LC 2, and LC 1's DD always exceeds LC 2's DD,
excluding grid points where this is not the case.

As before, for multiallelic diseases, we would lose the Dd
specifications and instead use single-digit integers.

==========================
Marker to marker analysis:
==========================

The MM directive indicates marker to marker analysis. By default, it
will do all possible pairwise analyses between any two markers. In
contrast, the AM directive specifies that only adjacent markers will
be analyzed.

==============
PPL settings:
==============
The followings are only applicable to two point, as for multipoint we
use imputed PPL

Theta cutoff with default of (0.05, 0.05)
Weight for points less than theta cutoff with default of 95%

Prior probability of Linkage with default of 2%
Prior probability of LD given linkage with default of 2%


==============
Case Control 
=============
CF - file specifies the case control counts. This also enables Case Ctrl
     special processing.
     The format of the file should be similar to the following:
Comment lines start with leading "#"
First uncommented line must start with "MARKER" keyword in order for some
scripts to work. The format should be:
MARKER case11 case12 case22 ctrl11 ctrl12 ctrl22 
In the case of X chromosome add the following columns:
 case1 case2 ctrl1 ctrl2
The column orders can be changed as long as the count matches heading. 

Data lines should contain the counts for each type of pedigree at each marker
Sample CC count file:
MARKER  case11   case12  case22  ctrl11 ctrl12 ctrl22
snp1  1434   100         41     100  200       1464
snp2  200    200         1000   100  200       20
snp3  1000   300         340    100  200       1200

The pedigree file can be generated by script "kelvin_cc_pedpost":
   kelvin_cc_pedpost <outputf> <# of markers> [sexLinked]
Kelvin datafile and mapfile can be generated by script "kelvin_cc_map" based on
the case ctrl count file. 
  kelvin_cc__map <inputf> <outputfile prefix> <chr>

Script "kelvin_cc_freq" can be used to calculate allele frequencies using controls 
only and kelvin marker frequency file will be generated.
  kelvin_cc_freq <inputf> <output file>

==============
Unimplemented:
==============

1. Have not yet implemented multiallelic diseases, which will increase
number of rows in penet[][].

2. Extend allele frequencies to more than SNPs.

3. Extend allele frequencies to handle liability classes (and allow AF
constraints between liability classes).

