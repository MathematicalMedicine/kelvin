This is the rewrite of Vitesse program which does likelihood calculations. 
We are trying to trim down Vitesse to the bare neccessities for MLIP
and will add more features as we go along. 

We decide to process post-makeped format pedigree file only. To get 
pos-makepd file, run
  makepd ped.pre pedfile.dat n     
      Even though there might be loops in it, just tell makeped, there is none
  unknown -l 
      unknown requires datafile.dat and pedfile.dat and generates lpedfile.dat

Makeped actually reorder people and change their IDs to numeric, even if
the original IDs are already numeric, makeped can change them (reorder
individuals). 
The last column matches the original ID in the pre-makeped file, so 
the original ID can be non-numeric. 

May 24th, 2005
  Started with pedigree structure and pedigree related functions to
  create a library to process pedigree information

Questions:
	Can we completely trust post-makeped file (first offspring....)?
	    Yes
	How Vitesse handle multiple marriages? Any special treatment needed?
	    No need to keep track of multiple spouses
	    Multiple marriages are represented by connected nuclear families
	    and it only matters in the peeling process
	Are doubled individuals linked together? 
	    Loop breaker
	When dad pointer is NULL, assume mom pointer is NULL too?
	    Yes, common protocol in pedigree
	Marriage nodes are only those with children?
	    Yes, common protocol in pedigree

More questions 06/13/2005
	1. Need to keep track of maximum number of children in any nuclear family?
	   Can we allocate space dynamically for child_alleles, proband_alleles
	   spouse_alleles.... instead of declare them as fixed array with
	   V_MAX_CHILDREN? 

used for computation only; creates a set of inheritance vectors
("child vectors") which you can turn on and off (won't work in
profiler, but does work in vitesse) during likelihood calculation (-1
f = parental pairs) (-1 c = child vectors). default is to use
heuristics to figure out what is likely to be more efficient. for
example, if the ratio of child vectors to parental pairs < 100, use
child vectors.

	2. Set up peeling direction for a pedigree
	   if parent is a proband, then direction for this family is UP
	   if child is a proband, then direction is DOWN
	   what if this peeling proband is both child and parent in
	     two nuclear families?
	   Similar question goes to the first_family link

peeling direction: there are a lot of boolean variables that tells you
whether you are updating the vector of probabilities or overwriting
it. 

peeling direction for each nuclear family is set based on the
structure of the pedigree. single founders no loops always peel up
(ellston-stewart) if you have multiple founders than at some point you
have to peel N-1 founder pairs down into the rest of the pedigree. 

this is an initial value, it changes over the course of the likelihood
calculation, its just cached on the ped structure.

	3. Two matching family connectors each in the connected nuclear
	   family.
	   For families connected with multiple marraiges, 
	   one connector is UP, the other should be DOWN

nuc families see other nuc families as "up" if they connect at the
parent level, otherwise if they connect at the child level, they see
the other family as "dn" this is not symmetric; two families can see
each other as both up, e.g., whn there are multiple marriages

WRONG: (perhaps) a NF sees another NF as an "up"family if the other NF
must peel down in order to get back to me. It sees another NF as a
"dn" family if the other NF must peel up in order to get back to me.

	4. Handle multiple loci with affection status and liability class?

implemented 2 locus disease stff, but for now just worry about 1 locus
disease stuff.

	5. Number of loops field (2*OFFSET) with OFFSET as 5? 
	   Each doubled individual is counted twice?

v_num_proband first gets an upper bound on the number of loops by counting 
how many proband fields in this family have >1 values. then you go back
and calculatte the number of loops by scannign for how many times each
proband value > 1 occurs. elsewhere we keep track of number of loop breakers; 
realize each person may bak multiple loops.

	6. How is phase handled in input file e.g., 2|1  

always paternal|maternal

if it is halftyped, vitesse will yield an error 2 0 or even 2|0
since lab technology generally assures you get both or none. but you
can override this with -L z (let's not handle this for now; might be
useful for simulation but not in practice).

backslash occurs in output to indicate phase not known.

======================================================================
before the likelihood calculation which is in v_likeli.c we need
to perform
   genotype elimination -- creategen.c
   set recoding -- lump.c (use -v to switch it off)
   genotype elimination, again -- creategen.c

transmission recoding will replace all ofthis. it looks at
parent/offspring transmission only. every meisos youloose half your
genome (genetic drift) (see Simwalk's "@"). Jeff will implement this summer. 

In summary:
   transmission recoding: parent-offspring
   set recoding: line of descent
   global clumping: while pedigree

genotype elimination:
   eliminates gynotypes based on mendel's law.
   when data is read in, all possible genotypes are constructed in the
     data structure. for example, for 4 alleles, a person is read in
     with all possible 16 (ordered) genotypes.
   using mendel's law, we can drop inconsistent genotypes. for example,
     if parent is untyped and child is 3|4, we know 1|2 is not a 
     possible parent genotype. these are local constraints propagate
     from parent to child and vice versa.

set recoding will be eliminated from vitesse; but for now we need it still. 
  also clumping, downcoding
  global clumping consolidates all unused alleles in a pedigree into
    a single "super allele" 
  set recoding is a bit finer. suppose you have an untyped individual
    with one child having type 3|4. you know that all the other alleles
    can be treated as a local "super allele" (here, 1 2 5 6 7, say)
  founders would only get global clumping, but internal people can
    get individual set recoding.
  so: set of alleles that do not appear below you in an unbrooken line
    of descent through untyped individuals can be represented as a
    single
    subset or super allele. mendelian laws are then dealt with by set 
    operations;
    parent super allele must be a subset of child super allele. even
    single alleles are treated as a singleton set.
  all bit operations. sometimes called "fuzzy inheritance"

second genotype elimination rewrites genotypes that have consolidated
  alleles into a single set.

rationale for genotype elim before setrecode is because some phase
  information can be propagated through the pedigree which will then
  lead to larger superalleles. for example; if a child is 3 4 and the
  married in parent is known 4 4, then the 4 cannot have come from the
  transmission line to founders, and can be added to the founders super
  allele. if we don't do genotype elim first, we won't have that info.

note genotype elim keeps iterating until there are no changes. 

======================================================================
ready for likelihood


**************************************
Note by Yungui Huang 06/22/2005

Pedigree processing future improvement
1. if loop(s) present, select individual(s) to double 
2. select proband 
3. setup pedigree structure pointers (first child, next paternal, next maternal siblings pointers) 
4. Check against string length limit when read in strings
5. Disease locus may not be the first locus, need to have the flexibility 
   to read in locus information in whatever order is specified in the datafile. 


Need to keep track of marriage nodes in a pedigree? (Same as nuclear families?)

