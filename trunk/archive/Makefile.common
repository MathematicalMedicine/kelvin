# Fire off a bunch of these with:
# find . -name kelvin.conf -execdir nq ../arctest.sh -pe make 4 -N arctest \;
# Won't allow multiple simultaneous runs.

# This is the "base" name of the set of binaries to test. It will be built-upon, e.g. $(BASE_KELVIN)-normal.
KELVIN_ROOT=/export/local/src/kelvin-2.4.5
BASE_KELVIN=$(KELVIN_ROOT)/kelvin-2.4.5

# Set of tests that can use the "subroutine" ($(testrun):) below.
testrun = normal # NonPE POLYCOMP_DL POLYUSE_DL no_GSL 
.PHONY: all $(testrun)

all : 	$(testrun)
#all : 	normal

# MUST build polynomial DLs before trying to simply use them
POLYUSE_DL :	POLYCOMP_DL

$(testrun): 
ifeq ($(wildcard MAKE-RUNNING-$@),MAKE-RUNNING-$@)
	echo Run already in progress
else
	- rm -rf *.out-$@ MAKE-*$@
	- touch MAKE-RUNNING-$@
	# I have to use $(if) here because ifeq is evaluated at parse time and not when rules are run
	$(if $(findstring $@,POLYCOMP_DL), -rm -rf *.so compiled)
	date >>runtimes-$@; (time ($(BASE_KELVIN)$(if $(findstring $@,NonPE),,-$@) kelvin.conf $(if $(findstring $@,NonPE),--NonPolynomial) --bayes br.out-$@ --ppl ppl.out-$@ >kelvin.out-$@ 2>&1) 2>&1) > runtime-$@
	mv MAKE-RUNNING-$@ MAKE-FAILED-$@
	perl $(KELVIN_ROOT)/utils/wordDiff.pl br.out-$@ br.out-baseline 0.0002
  ifeq ($(wildcard ppl.out),ppl.out)
	# Rounding to 3 places makes the ppl sloppier, so a 1% correspondence is good
	perl $(KELVIN_ROOT)/utils/wordDiff.pl ppl.out-$@ ppl.out-baseline 0.01
  endif
	mv MAKE-FAILED-$@ MAKE-GOOD-CURRENT-$@
	cat runtime-$@ | tee -a kelvin.out-$@ >> runtimes-$@
	- rm runtime-$@
        # Make sure we don't accumulate too much information
	- tail -1000 runtimes-$@ >fewerRuntimes-$@
	- mv fewerRuntimes-$@ runtimes-$@
        # Here I _will_ grep kelvin\*version and put the results into some file
endif

clean :
	- rm -rf adhoc.* kelvin_*_memory.dat MAKE-* *.so compiled *compiling *linking kelvin.out-POLY*
